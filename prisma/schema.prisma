generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  role          UserRole       @default(STUDENT)
  answers       Answer[]
  comments      Comment[]
  questions     Question[]
  notifications Notification[]

  @@map("users")
}

model Question {
  id           String       @id @default(uuid())
  title        String
  slug         String       @unique
  content      String
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime?    @updatedAt @map("updated_at")
  authorId     String       @map("author_id")
  bestAnswerId String?      @unique @map("best_answer_id")
  answers      Answer[]
  attachments  Attachment[]
  comments     Comment[]
  author       User         @relation(fields: [authorId], references: [id])
  bestAnswer   Answer?      @relation("bestAnswer", fields: [bestAnswerId], references: [id])

  @@map("questions")
}

model Answer {
  id           String       @id @default(uuid())
  content      String
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime?    @updatedAt @map("updated_at")
  authorId     String       @map("author_id")
  questionId   String       @map("question_id")
  author       User         @relation(fields: [authorId], references: [id])
  question     Question     @relation(fields: [questionId], references: [id])
  attachments  Attachment[]
  comments     Comment[]
  bestAnswerOn Question?    @relation("bestAnswer")

  @@map("answers")
}

model Comment {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  authorId   String    @map("author_id")
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")
  content    String
  answer     Answer?   @relation(fields: [answerId], references: [id])
  author     User      @relation(fields: [authorId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String    @id @default(uuid())
  title      String
  url        String
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")
  answer     Answer?   @relation(fields: [answerId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])

  @@map("attachments")
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  recipient   User      @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}
